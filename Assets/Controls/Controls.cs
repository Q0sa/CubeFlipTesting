//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""CubeFlip"",
            ""id"": ""ad743003-8a10-4341-bc7c-d06965382168"",
            ""actions"": [
                {
                    ""name"": ""Flip"",
                    ""type"": ""Button"",
                    ""id"": ""8d37e3b8-0acb-46cf-bc0b-2f8c8a65b4e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a9f6a3f4-3e4c-4c66-be86-85da04b3cb19"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BeatCar"",
            ""id"": ""0384c7ec-8d96-41a3-b2cd-0fef1069defc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3fa3cdef-8ba1-4edd-b94a-061fcaf604b7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BeatHit"",
                    ""type"": ""Button"",
                    ""id"": ""e014e455-905d-4fd5-b2c7-5df4857b6bc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17d00edb-0949-41aa-839b-ef977a7b0459"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BeatHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9c008d6-8332-42c3-8934-2895404ef794"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BeatHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d1a62504-c9d2-4d60-8973-9da85eac7d24"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8426c1ba-4da4-43be-adb5-4da33b26bf64"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8a72cc3f-a8a2-4c89-b5b2-eba4891a0c5e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CubeFlip
        m_CubeFlip = asset.FindActionMap("CubeFlip", throwIfNotFound: true);
        m_CubeFlip_Flip = m_CubeFlip.FindAction("Flip", throwIfNotFound: true);
        // BeatCar
        m_BeatCar = asset.FindActionMap("BeatCar", throwIfNotFound: true);
        m_BeatCar_Movement = m_BeatCar.FindAction("Movement", throwIfNotFound: true);
        m_BeatCar_BeatHit = m_BeatCar.FindAction("BeatHit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CubeFlip
    private readonly InputActionMap m_CubeFlip;
    private List<ICubeFlipActions> m_CubeFlipActionsCallbackInterfaces = new List<ICubeFlipActions>();
    private readonly InputAction m_CubeFlip_Flip;
    public struct CubeFlipActions
    {
        private @Controls m_Wrapper;
        public CubeFlipActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flip => m_Wrapper.m_CubeFlip_Flip;
        public InputActionMap Get() { return m_Wrapper.m_CubeFlip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CubeFlipActions set) { return set.Get(); }
        public void AddCallbacks(ICubeFlipActions instance)
        {
            if (instance == null || m_Wrapper.m_CubeFlipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CubeFlipActionsCallbackInterfaces.Add(instance);
            @Flip.started += instance.OnFlip;
            @Flip.performed += instance.OnFlip;
            @Flip.canceled += instance.OnFlip;
        }

        private void UnregisterCallbacks(ICubeFlipActions instance)
        {
            @Flip.started -= instance.OnFlip;
            @Flip.performed -= instance.OnFlip;
            @Flip.canceled -= instance.OnFlip;
        }

        public void RemoveCallbacks(ICubeFlipActions instance)
        {
            if (m_Wrapper.m_CubeFlipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICubeFlipActions instance)
        {
            foreach (var item in m_Wrapper.m_CubeFlipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CubeFlipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CubeFlipActions @CubeFlip => new CubeFlipActions(this);

    // BeatCar
    private readonly InputActionMap m_BeatCar;
    private List<IBeatCarActions> m_BeatCarActionsCallbackInterfaces = new List<IBeatCarActions>();
    private readonly InputAction m_BeatCar_Movement;
    private readonly InputAction m_BeatCar_BeatHit;
    public struct BeatCarActions
    {
        private @Controls m_Wrapper;
        public BeatCarActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BeatCar_Movement;
        public InputAction @BeatHit => m_Wrapper.m_BeatCar_BeatHit;
        public InputActionMap Get() { return m_Wrapper.m_BeatCar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BeatCarActions set) { return set.Get(); }
        public void AddCallbacks(IBeatCarActions instance)
        {
            if (instance == null || m_Wrapper.m_BeatCarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BeatCarActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @BeatHit.started += instance.OnBeatHit;
            @BeatHit.performed += instance.OnBeatHit;
            @BeatHit.canceled += instance.OnBeatHit;
        }

        private void UnregisterCallbacks(IBeatCarActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @BeatHit.started -= instance.OnBeatHit;
            @BeatHit.performed -= instance.OnBeatHit;
            @BeatHit.canceled -= instance.OnBeatHit;
        }

        public void RemoveCallbacks(IBeatCarActions instance)
        {
            if (m_Wrapper.m_BeatCarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBeatCarActions instance)
        {
            foreach (var item in m_Wrapper.m_BeatCarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BeatCarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BeatCarActions @BeatCar => new BeatCarActions(this);
    public interface ICubeFlipActions
    {
        void OnFlip(InputAction.CallbackContext context);
    }
    public interface IBeatCarActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBeatHit(InputAction.CallbackContext context);
    }
}
